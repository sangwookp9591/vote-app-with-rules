datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    // hashed
  nickname      String    @unique
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profileImageUrl String?   // 프로필 이미지 URL
  name          String?   // 사용자 이름(시드 데이터용)

  // Streamer specific
  streamerApplication StreamerApplication?
  streamer           Streamer?
  
  // Relations
  notifications      Notification[]
  votes             Vote[]          // 유저가 투표한 내역
  teams             TeamMember[]    // 속한 팀 정보
  applications      TournamentApplication[]

  @@map("users")
}

model StreamerApplication {
  id          String    @id @default(cuid())
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  reviewerId  String?   // 승인한 관리자 ID
  
  @@map("streamer_applications")
}

model Streamer {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  tournaments Tournament[]

  @@map("streamers")
}

model Tournament {
  id          String    @id @default(cuid())
  title       String
  description String?
  gameType    GameType
  formSchema  Json? // 게임별 신청 폼 정의(옵션)
  startDate   DateTime
  endDate     DateTime
  status      TournamentStatus @default(PREPARING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 투표 관련 설정
  voteStartDate DateTime?
  voteEndDate   DateTime?
  
  // Relations
  streamerId  String
  streamer    Streamer  @relation(fields: [streamerId], references: [id])
  teams       Team[]
  votes       Vote[]
  applications TournamentApplication[]

  @@map("tournaments")
}

model Team {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  members      TeamMember[]
  receivedVotes Vote[]
  teamInvitations TeamInvitation[]

  @@map("teams")
}

model TeamMember {
  id          String    @id @default(cuid())
  isLeader    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // LoL SWL/PSW 관련 정보
  lolNickname String
  lolTier     LolTier
  lolRank     Int       // 1-4
  lolPosition LolPosition
  lolPoints   Int

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])

  @@map("team_members")
}

model TeamInvitation {
  id          String    @id @default(cuid())
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  inviteeId   String    // 초대받은 유저 ID
  notification Notification?

  @@map("team_invitations")
}

model Vote {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())

  // Relations
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  voterId     String
  voter       User      @relation(fields: [voterId], references: [id])
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])

  @@map("votes")
}

model Notification {
  id          String    @id @default(cuid())
  type        NotificationType
  title       String
  content     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  teamInvitationId String?    @unique
  teamInvitation   TeamInvitation? @relation(fields: [teamInvitationId], references: [id])

  @@map("notifications")
}

model TournamentApplication {
  id           String   @id @default(cuid())
  tournamentId String
  userId       String
  gameData     Json     // 게임별 신청 정보(닉네임, 티어, 포지션 등)
  status       ApplicationStatus @default(PENDING)
  createdAt    DateTime @default(now())

  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@map("tournament_applications")
}

enum UserRole {
  ADMIN
  USER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TournamentStatus {
  PREPARING    // 준비중
  TEAM_RECRUITING // 팀 모집중
  VOTING       // 투표 진행중
  IN_PROGRESS  // 토너먼트 진행중
  COMPLETED    // 완료
  CANCELLED    // 취소됨
}

enum LolTier {
  IRON
  BRONZE
  SILVER
  GOLD
  PLATINUM
  EMERALD
  DIAMOND
  MASTER
  GRANDMASTER
  CHALLENGER
}

enum LolPosition {
  TOP
  JUNGLE
  MID
  ADC
  SUPPORT
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  TEAM_INVITATION
  TEAM_LEAVE_REQUEST
  TEAM_INVITATION_RESPONSE
  TOURNAMENT_START
  TOURNAMENT_END
  VOTE_START
  VOTE_END
}

enum GameType {
  LOL
  PUBG
  OVERWATCH
  VALORANT
  ETC
} 