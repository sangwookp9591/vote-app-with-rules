datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    // hashed
  nickname      String    @unique
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profileImageUrl String?   // 프로필 이미지 URL
  name          String?   // 사용자 이름(시드 데이터용)

  // Streamer specific
  streamerApplication StreamerApplication?
  streamer           Streamer?
  
  // Relations
  notifications      Notification[]
  votes             Vote[]          // 유저가 투표한 내역
  teams             TeamMember[]    // 속한 팀 정보
  applications      TournamentApplication[]
  hostedTournaments  Tournament[]    @relation("UserHostedTournaments")
  streams            Stream[]

  // 인기 스트리머 랭킹용 관계
  followers         Follower[]      @relation("StreamerFollowers") // 나를 팔로우하는 사람들
  following         Follower[]      @relation("UserFollows")      // 내가 팔로우하는 사람들
  streamerVotes     StreamerVote[]  @relation("StreamerVotes")    // 내가 받은 투표
  votedStreamers    StreamerVote[]  @relation("UserVotes")        // 내가 투표한 스트리머

  @@map("users")
}

model StreamerApplication {
  id          String    @id @default(cuid())
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  reviewerId  String?   // 승인한 관리자 ID
  
  @@map("streamer_applications")
}

model Streamer {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])

  // 게임별 프로필
  lolProfile      LolProfile?
  valorantProfile ValorantProfile?

  @@map("streamers")
}

model LolProfile {
  id          String   @id @default(cuid())
  streamerId  String   @unique
  streamer    Streamer @relation(fields: [streamerId], references: [id])
  nickname    String
  tier        LolTier
  rank        Int
  position    LolPosition
  mainChampions Json // ex: ["Yasuo", "Ahri"]
  winRate     Float?
  gamesPlayed Int?
}

model ValorantProfile {
  id          String   @id @default(cuid())
  streamerId  String   @unique
  streamer    Streamer @relation(fields: [streamerId], references: [id])
  nickname    String
  tier        ValorantTier
  position    ValorantPosition
  mainAgents  Json // ex: ["Jett", "Sage"]
  role        String?
  winRate     Float?
  gamesPlayed Int?
}

model Tournament {
  id          String    @id @default(cuid())
  title       String
  description String?
  gameType    GameType
  teamSize    Int       // 팀당 팀원 수 (LoL: 5, Overwatch: 6, PUBG: 4 등)
  formSchema  Json? // 게임별 신청 폼 정의(옵션)
  startDate   DateTime
  endDate     DateTime
  status      TournamentStatus @default(PREPARING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 투표 관련 설정
  voteStartDate DateTime?
  voteEndDate   DateTime?
  
  // Relations
  hostId     String
  host       User      @relation("UserHostedTournaments", fields: [hostId], references: [id])
  teams       Team[]
  votes       Vote[]
  applications TournamentApplication[]

  @@map("tournaments")
}

model Team {
  id          String    @id @default(cuid())
  name        String
  description String?   // 팀 설명 필드 추가
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  members      TeamMember[]
  receivedVotes Vote[]
  teamInvitations TeamInvitation[]

  @@map("teams")
}

model TeamMember {
  id          String    @id @default(cuid())
  isLeader    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // LoL SWL/PSW 관련 정보
  lolNickname String
  lolTier     LolTier
  lolRank     Int       // 1-4
  lolPosition LolPosition
  lolPoints   Int

  inviteStatus InvitationStatus @default(PENDING)

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])

  @@map("team_members")
}

model TeamInvitation {
  id          String    @id @default(cuid())
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])
  inviteeId   String    // 초대받은 유저 ID
  notification Notification?

  @@map("team_invitations")
}

model Vote {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())

  // Relations
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  voterId     String
  voter       User      @relation(fields: [voterId], references: [id])
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id])

  @@map("votes")
}

model Notification {
  id          String    @id @default(cuid())
  type        NotificationType
  title       String
  content     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  teamInvitationId String?    @unique
  teamInvitation   TeamInvitation? @relation(fields: [teamInvitationId], references: [id])

  link        String?   // 알림 클릭 시 이동할 링크

  @@map("notifications")
}

model TournamentApplication {
  id           String   @id @default(cuid())
  tournamentId String
  userId       String
  gameData     Json     // 게임별 신청 정보(닉네임, 티어, 포지션 등)
  status       ApplicationStatus @default(PENDING)
  createdAt    DateTime @default(now())

  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@map("tournament_applications")
}

model Stream {
  id           String   @id @default(uuid())
  title        String
  description  String?
  streamer     User     @relation(fields: [streamerId], references: [id])
  streamerId   String
  isLive       Boolean  @default(false)
  startedAt    DateTime @default(now())
  endedAt      DateTime?
  viewers      Int      @default(0)
  streamKey    String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // 인기 스트리머 랭킹용 필드
  maxViewers   Int?     // 방송 중 최고 동시 시청자 수
  totalViewers Int?     // 방송 중 누적 시청자 수
  // 일별 누적 시청자 수 집계 관계
  streamDailyViewers StreamDailyViewers[]
}

// 방송별 일별 누적 시청자 수 집계 테이블
model StreamDailyViewers {
  id        String   @id @default(uuid())
  streamId  String
  date      DateTime // 일자(YYYY-MM-DD, 시간은 00:00:00)
  count     Int      // 해당 일자의 유니크 시청자 수
  stream    Stream   @relation(fields: [streamId], references: [id])
  @@unique([streamId, date])
}

// 팔로우(구독) 테이블
model Follower {
  id         String   @id @default(uuid())
  userId     String   // 팔로우하는 유저(팔로워)
  streamerId String   // 팔로우 당하는 스트리머
  createdAt  DateTime @default(now())
  // 관계
  user       User     @relation("UserFollows", fields: [userId], references: [id])
  streamer   User     @relation("StreamerFollowers", fields: [streamerId], references: [id])
  @@unique([userId, streamerId])
}

// 스트리머 인기 투표 테이블
model StreamerVote {
  id         String   @id @default(uuid())
  userId     String   // 투표한 유저
  streamerId String   // 투표받은 스트리머
  createdAt  DateTime @default(now())
  // 관계
  user       User     @relation("UserVotes", fields: [userId], references: [id])
  streamer   User     @relation("StreamerVotes", fields: [streamerId], references: [id])
  @@unique([userId, streamerId])
}

enum UserRole {
  ADMIN
  USER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TournamentStatus {
  PREPARING    // 준비중
  TEAM_RECRUITING // 팀 모집중
  VOTING       // 투표 진행중
  IN_PROGRESS  // 토너먼트 진행중
  COMPLETED    // 완료
  CANCELLED    // 취소됨
}

enum LolTier {
  IRON
  BRONZE
  SILVER
  GOLD
  PLATINUM
  EMERALD
  DIAMOND
  MASTER
  GRANDMASTER
  CHALLENGER
}

enum LolPosition {
  TOP
  JUNGLE
  MID
  ADC
  SUPPORT
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  TEAM_INVITATION
  TEAM_LEAVE_REQUEST
  TEAM_INVITATION_RESPONSE
  TOURNAMENT_START
  TOURNAMENT_END
  VOTE_START
  VOTE_END
  TEAM_KICK
}

enum GameType {
  LOL
  PUBG
  OVERWATCH
  VALORANT
  CS2
  DOTA2
  ETC
}

enum ValorantTier {
  IRON
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  ASCENDANT
  IMMORTAL
  RADIANT
}

enum ValorantPosition {
  DUELIST
  SENTINEL
  INITIATOR
  CONTROLLER
} 